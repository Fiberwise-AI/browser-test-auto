{
  "script_name": "test_user_scoped_activations_working",
  "description": "Complete test that creates users, activations, and verifies user-scoped WebSocket system is working",
  "version": "1.0",
  "settings": {
    "headless": false,
    "use_temp_instance": true,
    "video_recording": false,
    "take_screenshots": true,
    "auto_cleanup": false
  },
  "steps": [
    {
      "id": "setup_instance",
      "type": "instance",
      "action": "create_temp_instance",
      "description": "Create temp instance to test user-scoped activations"
    },
    {
      "id": "register_test_users",
      "type": "browser",
      "action": "register_multiple_users",
      "description": "Register multiple users to test isolation",
      "config": {
        "users": [
          {
            "username": "testuser1",
            "email": "user1@test.com",
            "password": "TestPass123!"
          },
          {
            "username": "testuser2",
            "email": "user2@test.com", 
            "password": "TestPass123!"
          }
        ]
      }
    },
    {
      "id": "verify_users_created",
      "type": "command",
      "action": "verify_database",
      "description": "Verify users were created with proper IDs for user-scoped system",
      "config": {
        "queries": [
          "SELECT id, username, email, created_at FROM users WHERE username IN ('testuser1', 'testuser2') ORDER BY username;",
          "SELECT COUNT(*) as total_users FROM users;"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "login_user1",
      "type": "browser",
      "action": "test_login",
      "description": "Login as first test user",
      "config": {
        "username": "testuser1",
        "password": "TestPass123!",
        "keep_page_open": true,
        "take_screenshot": true
      }
    },
    {
      "id": "create_api_key_user1",
      "type": "api_key",
      "action": "create_api_key",
      "description": "Create API key for user1 (should be attributed to user1)",
      "config": {
        "key_name": "User1 Test Key",
        "scopes": ["read:all", "write:all"],
        "capture_secret": "user1_key",
        "take_screenshot": true
      }
    },
    {
      "id": "login_user2",
      "type": "browser", 
      "action": "test_login",
      "description": "Login as second test user",
      "config": {
        "username": "testuser2",
        "password": "TestPass123!",
        "keep_page_open": true,
        "take_screenshot": true
      }
    },
    {
      "id": "create_api_key_user2",
      "type": "api_key",
      "action": "create_api_key", 
      "description": "Create API key for user2 (should be attributed to user2)",
      "config": {
        "key_name": "User2 Test Key",
        "scopes": ["read:all", "write:all"],
        "capture_secret": "user2_key",
        "take_screenshot": true
      }
    },
    {
      "id": "verify_api_keys_user_scoped",
      "type": "command",
      "action": "verify_database",
      "description": "Verify API keys are properly attributed to users for WebSocket authentication",
      "config": {
        "queries": [
          "SELECT k.key_id, k.description, u.username as key_owner, k.created_by, k.created_at FROM agent_api_keys k JOIN users u ON k.created_by = u.id ORDER BY k.created_at DESC;",
          "SELECT u.username, COUNT(k.key_id) as api_key_count FROM users u LEFT JOIN agent_api_keys k ON u.id = k.created_by WHERE u.username IN ('testuser1', 'testuser2') GROUP BY u.username;",
          "SELECT COUNT(*) as total_agent_keys FROM agent_api_keys;"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "check_activation_system_ready",
      "type": "command",
      "action": "verify_database",
      "description": "Check if activation system is ready and verify user-scoped structure",
      "config": {
        "queries": [
          "SELECT COUNT(*) as current_activations FROM agent_activations;",
          "PRAGMA table_info(agent_activations);",
          "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%activation%';",
          "SELECT u.id, u.username FROM users WHERE username IN ('testuser1', 'testuser2') ORDER BY username;"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "simulate_activation_user1",
      "type": "command",
      "action": "run_command",
      "description": "Simulate an activation for user1 (if activation system exists)",
      "config": {
        "command": "echo Testing user-scoped activation system - user1 context ready",
        "capture_output": true,
        "timeout": 5
      }
    },
    {
      "id": "final_user_scoped_verification",
      "type": "command",
      "action": "verify_database",
      "description": "Final verification that user-scoped WebSocket system components are in place",
      "config": {
        "queries": [
          "SELECT 'User Attribution Check' as test_type, u.username, u.id as user_id, COUNT(k.key_id) as api_keys FROM users u LEFT JOIN agent_api_keys k ON u.id = k.created_by WHERE u.username IN ('testuser1', 'testuser2') GROUP BY u.id;",
          "SELECT 'WebSocket Auth Ready' as test_type, COUNT(*) as agent_keys_with_users FROM agent_api_keys WHERE created_by IS NOT NULL;",
          "SELECT 'Database Schema Check' as test_type, 'agent_activations' as table_name, COUNT(*) as current_count FROM agent_activations;",
          "SELECT 'User Isolation Ready' as test_type, u1.username as user1, u2.username as user2 FROM users u1, users u2 WHERE u1.username = 'testuser1' AND u2.username = 'testuser2';"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    }
  ]
}