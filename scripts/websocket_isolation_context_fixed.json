{
  "script_name": "websocket_isolation_context_fixed",
  "description": "Fixed: User-scoped WebSocket test with proper browser context isolation to prevent cookie conflicts",
  "version": "1.0",
  "settings": {
    "headless": false,
    "use_temp_instance": true,
    "video_recording": false,
    "take_screenshots": true,
    "auto_cleanup": false,
    "force_exit_on_complete": true
  },
  "steps": [
    {
      "id": "setup",
      "type": "instance",
      "action": "create_temp_instance",
      "description": "Create temp instance for isolation testing"
    },
    {
      "id": "register_user1_only",
      "type": "browser",
      "action": "register_multiple_users",
      "description": "Register only user1 first (avoid cookie conflicts)",
      "config": {
        "users": [
          {
            "username": "wsuser1",
            "email": "ws1@example.com",
            "password": "TestPass123!"
          }
        ]
      }
    },
    {
      "id": "verify_user1_in_db",
      "type": "command",
      "action": "verify_database",
      "description": "Verify user1 created successfully",
      "config": {
        "queries": [
          "SELECT id, username, email FROM users WHERE username = 'wsuser1';",
          "SELECT COUNT(*) as user_count FROM users;"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "login_user1",
      "type": "browser",
      "action": "test_login",
      "description": "Login as user1 and keep session active",
      "config": {
        "username": "wsuser1",
        "password": "TestPass123!",
        "keep_page_open": true,
        "take_screenshot": true
      }
    },
    {
      "id": "navigate_api_keys_user1",
      "type": "browser", 
      "action": "navigate_and_verify",
      "description": "Navigate to API keys page for user1",
      "config": {
        "url": "/settings/api-keys",
        "take_screenshot": true,
        "keep_page_open": true,
        "wait_for_selector": ".api-keys-container, .create-api-key, h1, main",
        "timeout": 15000
      }
    },
    {
      "id": "create_api_key_user1",
      "type": "api_key",
      "action": "create_api_key",
      "description": "Create API key for user1 (WebSocket auth)",
      "config": {
        "key_name": "User1 WebSocket Key",
        "scopes": ["read:all", "write:all"],
        "capture_secret": "user1_api_key",
        "take_screenshot": true,
        "keep_page_open": false
      }
    },
    {
      "id": "verify_user1_api_key",
      "type": "command",
      "action": "verify_database",
      "description": "Verify user1's API key properly attributed for WebSocket isolation",
      "config": {
        "queries": [
          "SELECT k.key_id, k.description, u.username as owner, k.created_by FROM agent_api_keys k JOIN users u ON k.created_by = u.id WHERE u.username = 'wsuser1';",
          "SELECT COUNT(*) as user1_keys FROM agent_api_keys WHERE created_by = (SELECT id FROM users WHERE username = 'wsuser1');"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "close_user1_browser",
      "type": "browser",
      "action": "cleanup_shared_page",
      "description": "Close user1's browser session to prepare for user2",
      "config": {
        "close_all_pages": true
      }
    },
    {
      "id": "register_user2_separate",
      "type": "browser",
      "action": "register_multiple_users",
      "description": "Register user2 in fresh browser session (no cookie conflicts)",
      "config": {
        "users": [
          {
            "username": "wsuser2",
            "email": "ws2@example.com",
            "password": "TestPass123!"
          }
        ]
      }
    },
    {
      "id": "verify_both_users_isolated",
      "type": "command",
      "action": "verify_database",
      "description": "Verify both users exist with separate identities",
      "config": {
        "queries": [
          "SELECT id, username, email FROM users WHERE username IN ('wsuser1', 'wsuser2') ORDER BY username;",
          "SELECT COUNT(*) as total_users FROM users;",
          "SELECT 'User Isolation Check' as test, COUNT(DISTINCT id) as unique_users FROM users WHERE username IN ('wsuser1', 'wsuser2');"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "login_user2_fresh_session",
      "type": "browser",
      "action": "test_login",
      "description": "Login as user2 in separate session",
      "config": {
        "username": "wsuser2",
        "password": "TestPass123!",
        "keep_page_open": true,
        "take_screenshot": true
      }
    },
    {
      "id": "create_api_key_user2",
      "type": "api_key",
      "action": "create_api_key",
      "description": "Create API key for user2 (should be separate from user1)",
      "config": {
        "key_name": "User2 WebSocket Key",
        "scopes": ["read:all", "write:all"],
        "capture_secret": "user2_api_key",
        "take_screenshot": true,
        "keep_page_open": false
      }
    },
    {
      "id": "final_isolation_verification",
      "type": "command",
      "action": "verify_database",
      "description": "Final verification: Both users have separate API keys for WebSocket isolation",
      "config": {
        "queries": [
          "SELECT k.key_id, k.description, u.username as owner, k.created_by FROM agent_api_keys k JOIN users u ON k.created_by = u.id ORDER BY u.username;",
          "SELECT u.username, COUNT(k.key_id) as key_count FROM users u LEFT JOIN agent_api_keys k ON u.id = k.created_by WHERE u.username IN ('wsuser1', 'wsuser2') GROUP BY u.username;",
          "SELECT 'WebSocket Isolation Ready' as status, COUNT(DISTINCT created_by) as isolated_users, COUNT(*) as total_keys FROM agent_api_keys WHERE created_by IS NOT NULL;"
        ],
        "database_path": "{{instance_dir}}/local_data/fiberwise.db"
      }
    },
    {
      "id": "summary",
      "type": "command",
      "action": "run_command",
      "description": "Test completion summary",
      "config": {
        "command": "echo \"âœ… WebSocket User Isolation Test Complete! Two users with separate API keys and sessions created successfully.\"",
        "capture_output": true,
        "timeout": 2
      }
    }
  ]
}